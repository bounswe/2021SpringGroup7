name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: columbusgroup7/


jobs:
  Frontend-Build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      #- name: Log into registry ${{ env.REGISTRY }}
      #  if: github.event_name != 'pull_request'
      #  uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      #  with:
      #    registry: ${{ env.REGISTRY }}
      #    username: columbusgroup7
      #    password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      #- name: Extract Docker metadata
      #  id: meta
      #  uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #  with:
      #    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./Columbus/frontend
          push: ${{ github.event_name != 'pull_request' }}
          #tags: ${{ steps.meta.outputs.tags }}
          #labels: ${{ steps.meta.outputs.labels }}
  Backend-Build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      #- name: Log into registry ${{ env.REGISTRY }}
      #  if: github.event_name != 'pull_request'
      #  uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      #  with:
      #    registry: ${{ env.REGISTRY }}
      #    username: columbusgroup7
      #    password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      #- name: Extract Docker metadata
      #  id: meta
      #  uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #  with:
      #    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./Columbus/backend
          push: ${{ github.event_name != 'pull_request' }}
          #tags: ${{ steps.meta.outputs.tags }}
          #labels: ${{ steps.meta.outputs.labels }}
  EC2-Deployment:
    runs-on: ubuntu-latest
    needs: [Backend-Build, Frontend-Build]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY_ED25519 }}
          port: ${{ secrets.PORT }}
          script: sh deploy.sh
          
  

  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [Frontend-Build, Backend-Build, EC2-Deployment]
    if: always()
    steps:
    - uses: actions/checkout@v2
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: Status F-B - ${{ needs.Frontend-Build.result }} - B-B - ${{ needs.Backend-Build.result }} - EC2 - ${{ needs.EC2-Deployment.result }} 
        
        
